{"ast":null,"code":"var _jsxFileName = \"/home/john/Documents/work/siit-react-master/src/components/auth/Login.js\";\nimport React, { useState, useContext } from 'react';\nimport qs from 'qs';\nimport axios from 'axios';\nimport AuthContext from './AuthContext';\nconst errorMessages = {\n  'username': 'You must enter a username!',\n  'password': 'You must enter a password!'\n};\nexport default function Login() {\n  // Vom stoca aici toate value-urile input-urilor din formular\n  const [formData, setFormData] = useState({\n    'username': '',\n    'password': ''\n  }); // Vom seta cate un mesaj de eroare pentru fiecare form field in parte in cazul in care e eronat campul\n\n  const [formError, setFormError] = useState({\n    'username': '',\n    'password': ''\n  }); // O vom folosi pentru cand vine raspuns cu eroare de la server\n\n  const [globalErrorMessage, setGlobalError] = useState(''); // O vom folosi doar pentru mesajul de succes\n\n  const [isSuccessfull, setSuccessfull] = useState(false);\n  /*\r\n      Vom folosi aceasta variabila de stare ca sa determinam daca formularul s-a modificat si vom face butonul\r\n      disabled daca nu s-a modificat.       \r\n        Prin urmare vom seta isDirty true atunci cand se declanseaza Change la orice input.\r\n        De asemenea vom face isDirty false de fiecare data cand se da Submit.\r\n  */\n\n  const [isDirty, setDirty] = useState(false);\n  const {\n    setToken\n  } = useContext(AuthContext);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setGlobalError('');\n    setSuccessfull(false);\n    const isInvalid = validateFormData();\n\n    if (!isInvalid) {\n      setDirty(false);\n\n      try {\n        const res = await axios('https://ancient-caverns-16784.herokuapp.com/auth/login', {\n          method: 'POST',\n          data: qs.stringify(formData)\n        });\n        setToken(res.data.accessToken);\n        localStorage.setItem('token', res.data.accessToken);\n        setSuccessfull(true);\n      } catch (e) {\n        setGlobalError(e.response.data.message);\n      }\n    }\n  }\n\n  function validateFormData() {\n    const inputs = ['username', 'password'];\n    const newError = { ...formError\n    };\n    let isInvalid = false;\n\n    for (const input of inputs) {\n      if (!formData[input]) {\n        newError[input] = errorMessages[input];\n        isInvalid = true;\n      }\n    }\n\n    setFormError(newError);\n    return isInvalid;\n  }\n\n  function handleInputChange(e) {\n    // const prop = e.currentTarget.id;\n    // const newObj = { ...formData };\n    // newObj[prop] = e.currentTarget.value;\n    // setFormData(newObj);\n    setDirty(true);\n    setFormData({ ...formData,\n      [e.currentTarget.id]: e.currentTarget.value\n    }); // Aici resetam erorile in cazul in care se scrie din nou in inputuri\n\n    const newError = { ...formError,\n      [e.currentTarget.id]: ''\n    };\n\n    if (e.currentTarget.id === 'password' || e.currentTarget.id === 'retype-password') {\n      newError['different-passwords'] = '';\n    }\n\n    setFormError(newError);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Login\"), globalErrorMessage ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, globalErrorMessage) : null, isSuccessfull ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-success\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"You hsave been successfully logged in!\") : null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInputChange,\n    value: formData.username,\n    type: \"text\",\n    className: 'form-control' + (formError.username ? ' is-invalid' : ''),\n    id: \"username\",\n    placeholder: \"Enter username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, formError.username)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInputChange,\n    value: formData.password,\n    type: \"password\",\n    className: 'form-control' + (formError.password ? ' is-invalid' : ''),\n    id: \"password\",\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, formError.password)), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    disabled: !isDirty,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, \"Login\")));\n}","map":{"version":3,"sources":["/home/john/Documents/work/siit-react-master/src/components/auth/Login.js"],"names":["React","useState","useContext","qs","axios","AuthContext","errorMessages","Login","formData","setFormData","formError","setFormError","globalErrorMessage","setGlobalError","isSuccessfull","setSuccessfull","isDirty","setDirty","setToken","handleSubmit","e","preventDefault","isInvalid","validateFormData","res","method","data","stringify","accessToken","localStorage","setItem","response","message","inputs","newError","input","handleInputChange","currentTarget","id","value","username","password"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport qs from 'qs';\r\nimport axios from 'axios';\r\nimport AuthContext from './AuthContext';\r\n\r\nconst errorMessages = {\r\n    'username': 'You must enter a username!',\r\n    'password': 'You must enter a password!',\r\n};\r\n\r\nexport default function Login() {\r\n    // Vom stoca aici toate value-urile input-urilor din formular\r\n    const [formData, setFormData] = useState({\r\n        'username': '',\r\n        'password': '',\r\n    });\r\n\r\n    // Vom seta cate un mesaj de eroare pentru fiecare form field in parte in cazul in care e eronat campul\r\n    const [formError, setFormError] = useState({\r\n        'username': '',\r\n        'password': '',\r\n    });\r\n\r\n    // O vom folosi pentru cand vine raspuns cu eroare de la server\r\n    const [globalErrorMessage, setGlobalError] = useState('');\r\n    // O vom folosi doar pentru mesajul de succes\r\n    const [isSuccessfull, setSuccessfull] = useState(false);\r\n    /*\r\n        Vom folosi aceasta variabila de stare ca sa determinam daca formularul s-a modificat si vom face butonul\r\n        disabled daca nu s-a modificat.       \r\n\r\n        Prin urmare vom seta isDirty true atunci cand se declanseaza Change la orice input.\r\n\r\n        De asemenea vom face isDirty false de fiecare data cand se da Submit.\r\n    */\r\n    const [isDirty, setDirty] = useState(false);\r\n\r\n    const { setToken } = useContext(AuthContext);\r\n\r\n    async function handleSubmit(e) { \r\n        e.preventDefault(); \r\n\r\n        setGlobalError('');\r\n        setSuccessfull(false);\r\n\r\n        const isInvalid = validateFormData();\r\n\r\n        if(!isInvalid) {\r\n            setDirty(false);\r\n            try {\r\n                const res = await axios('https://ancient-caverns-16784.herokuapp.com/auth/login',{\r\n                    method: 'POST',\r\n                    data: qs.stringify(formData),\r\n                });\r\n\r\n                setToken(res.data.accessToken);\r\n                localStorage.setItem('token', res.data.accessToken);\r\n                \r\n                setSuccessfull(true);\r\n            } catch(e) {\r\n                setGlobalError(e.response.data.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    function validateFormData() {\r\n        const inputs = ['username', 'password'];\r\n        const newError = { ...formError };\r\n        let isInvalid = false;\r\n        \r\n        for(const input of inputs) {\r\n            if(!formData[input]) {\r\n                newError[input] = errorMessages[input];\r\n                isInvalid = true;\r\n            }\r\n        }\r\n\r\n        setFormError(newError);\r\n        return isInvalid;\r\n    }\r\n\r\n    function handleInputChange(e) {\r\n        // const prop = e.currentTarget.id;\r\n        // const newObj = { ...formData };\r\n        // newObj[prop] = e.currentTarget.value;\r\n\r\n        // setFormData(newObj);\r\n        setDirty(true);\r\n\r\n        setFormData({\r\n            ...formData,\r\n            [e.currentTarget.id]: e.currentTarget.value\r\n        });\r\n\r\n        // Aici resetam erorile in cazul in care se scrie din nou in inputuri\r\n        const newError = { \r\n            ...formError, \r\n            [e.currentTarget.id]: '',\r\n        };\r\n\r\n        if(e.currentTarget.id === 'password' || e.currentTarget.id === 'retype-password') {\r\n            newError['different-passwords'] = '';\r\n        }\r\n\r\n        setFormError(newError);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Login</h1>\r\n\r\n            { (globalErrorMessage ?  \r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    { globalErrorMessage }\r\n                </div>\r\n            : null) }\r\n\r\n            { (isSuccessfull ?  \r\n                <div className=\"alert alert-success\" role=\"alert\">\r\n                    You hsave been successfully logged in!\r\n                </div>\r\n            : null) }\r\n            <form onSubmit={ handleSubmit }>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"username\">Username</label>\r\n                    <input \r\n                        onChange={ handleInputChange }\r\n                        value={ formData.username }\r\n                        type=\"text\"\r\n                        className={ 'form-control' + (formError.username ? ' is-invalid' : '') }\r\n                        id=\"username\"\r\n                        placeholder=\"Enter username\"\r\n                    />\r\n\r\n                    <div className=\"invalid-feedback\">\r\n                        { formError.username }\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input\r\n                        onChange={ handleInputChange }\r\n                        value={ formData.password }\r\n                        type=\"password\"\r\n                        className={ 'form-control' + (formError.password ? ' is-invalid' : '') }\r\n                        id=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                    <div className=\"invalid-feedback\">\r\n                        { formError.password }\r\n                    </div>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={ !isDirty }>Login</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}